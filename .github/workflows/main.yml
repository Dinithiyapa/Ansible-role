name: Build, Push Docker Images, and Deploy with Ansible

on:
  push:
    branches:
      - '**'  # Trigger the workflow on pushes to any branch

jobs:
  build-web:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 4: Build and Push the Web Image
      - name: Build and push web image
        uses: docker/build-push-action@v4
        with:
          context: ./web  # Path to the web app's Dockerfile
          push: true
          tags: yapadinithi/buzbud-web-action:${{ github.run_number }}-${{ github.run_attempt }}  # Use run number and attempt number for tagging

  build-api:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 4: Build and Push the API Image
      - name: Build and push API image
        uses: docker/build-push-action@v4
        with:
          context: ./api  # Path to the API's Dockerfile
          push: true
          tags: yapadinithi/buzbud-api-action:${{ github.run_number }}-${{ github.run_attempt }}  # Use run number and attempt number for tagging

  deploy-ansible:
    name: Deploy with Ansible
    needs:
      - build-web
      - build-api
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Execute remote SSH commands using password (Appleboy SSH Action)
      - name: Execute remote SSH commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}  # Add Linode server IP as a secret
          username: ${{ secrets.USERNAME }}  # Add Linode username as a secret
          password: ${{ secrets.PASSWORD }}  # Add your Linode password as a secret
          port: ${{ secrets.PORT }}  # Usually port 22 for SSH, adjust if different
          script: |
            # Navigate to your deployment directory and run your deployment script
            cd /path/to/your/deployment/directory
            bash update.sh  # Run your update or deployment script
