name: Build, Push Docker Images, and Deploy with Ansible

on:
  push:
    branches:
      - '**'  # Trigger the workflow on pushes to any branch

jobs:
  build-web:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push web image
        uses: docker/build-push-action@v4
        with:
          context: ./web  # Path to the web app's Dockerfile
          push: true
          tags: yapadinithi/buzbud-web-action:${{ github.run_number }}-${{ github.run_attempt }}

  build-api:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push API image
        uses: docker/build-push-action@v4
        with:
          context: ./api  # Path to the API's Dockerfile
          push: true
          tags: yapadinithi/buzbud-api-action:${{ github.run_number }}-${{ github.run_attempt }}

  deploy-ansible:
    name: Deploy with Ansible
    needs:
      - build-web
      - build-api
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Execute remote SSH commands using password (Appleboy SSH Action)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}  # Linode server IP or EC2 IP
          username: ${{ secrets.USERNAME }}  # SSH username
          password: ${{ secrets.PASSWORD }}  # SSH password
          port: ${{ secrets.PORT }}  # Typically 22 for SSH
          script: |
            # Install Docker if it's not already installed
            if ! command -v docker &> /dev/null
            then
                echo "Docker could not be found, installing Docker..."
                sudo apt-get update
                sudo apt-get install -y docker.io
                sudo systemctl start docker
                sudo systemctl enable docker
            fi

            # Stop and remove any existing containers
            docker ps -a -q -f name=web-container | xargs -r docker rm -f
            docker ps -a -q -f name=api-container | xargs -r docker rm -f

            # Pull the latest images
            docker pull yapadinithi/buzbud-web-action:${{ github.run_number }}-${{ github.run_attempt }}
            docker pull yapadinithi/buzbud-api-action:${{ github.run_number }}-${{ github.run_attempt }}

            # Run the containers (adjust ports and volumes as needed)
            docker run -d -p 80:80 --name web-container yapadinithi/buzbud-web-action:${{ github.run_number }}-${{ github.run_attempt }}
            docker run -d -p 8080:8080 --name api-container yapadinithi/buzbud-api-action:${{ github.run_number }}-${{ github.run_attempt }}

            # Optionally, run other commands like database migrations or application-specific tasks
            # bash update.sh
